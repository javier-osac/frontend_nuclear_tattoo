---
import Base from "@/layouts/Base.astro";
import "@/styles/login_register.scss";
---

<Base>
  <div id="container">
    <!-- Contenedor para el formulario de restablecimiento de contraseña -->
    <div class="reset_password">
      <form id="passwordResetForm">
        <h2>Ingresa Nueva Contraseña</h2>

        <!-- Campo de nueva contraseña -->
        <div class="input-box">
          <span class="icon">
            <ion-icon name="lock-closed-outline"></ion-icon>
          </span>
          <input name="password" type="password" required />
          <label>Introduce tu Nueva Contraseña</label>
          <div class="input-line"></div>
        </div>

        <!-- Campo de confirmación de nueva contraseña -->
        <div class="input-box">
          <span class="icon">
            <ion-icon name="lock-closed-outline"></ion-icon>
          </span>
          <input name="passwordConfirmation" type="password" required />
          <label>Confirma tu Nueva Contraseña</label>
          <div class="input-line"></div>
        </div>

        <!-- Botón de envío -->
        <button type="submit" class="button-init">Enviar</button>
      </form>
    </div>
  </div>

  <!-- Ionicons para los íconos -->
  <script type="module" src="https://cdn.jsdelivr.net/npm/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
  <script nomodule src="https://cdn.jsdelivr.net/npm/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const passwordResetForm = document.getElementById("passwordResetForm");

      // Obtiene el token de la URL
      const urlParams = new URLSearchParams(window.location.search);
      const token = urlParams.get("token");

      // Verifica si el token está presente
      if (!token) {
        alert("Token no válido o no proporcionado");
        window.location.href = "/login_register"; // Redirige al login si no hay token
        return;
      }

      // Maneja el envío del formulario
      passwordResetForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const formData = new FormData(passwordResetForm);
        const password = formData.get("password");
        const passwordConfirmation = formData.get("passwordConfirmation");

        // Validación de contraseñas
        if (!password || !passwordConfirmation) {
          alert("Por favor, llena todos los campos.");
          return;
        }

        if (password !== passwordConfirmation) {
          alert("Las contraseñas no coinciden. Por favor, inténtalo de nuevo.");
          return;
        }

        // Solicitud para restablecer la contraseña
        try {
          const response = await fetch("http://localhost:3001/users/reset-password", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ token, password }),
          });

          const result = await response.json();
          if (response.ok) {
            alert("¡Contraseña restablecida con éxito!");
            window.location.href = "/login_register"; // Redirige al login
          } else {
            alert(result.error || "Error al restablecer la contraseña.");
          }
        } catch (error) {
          console.error("Error al restablecer la contraseña:", error);
          alert("Ocurrió un error al intentar restablecer la contraseña.");
        }
      });

      // Ajuste para mantener las etiquetas en la posición correcta
      document.querySelectorAll(".input-box input").forEach((input) => {
        if (input.value.trim() !== "") {
          input.classList.add("has-content");
        }

        input.addEventListener("input", () => {
          if (input.value.trim() !== "") {
            input.classList.add("has-content");
          } else {
            input.classList.remove("has-content");
          }
        });
      });
    });
  </script>
</Base>